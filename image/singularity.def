BootStrap: debootstrap
OSVersion: zesty
MirrorURL: http://archive.ubuntu.com/ubuntu/

%post
  sed -i 's/main/main restricted universe/g' /etc/apt/sources.list
  sed -i 's/^# deb-src/deb-src/g' /etc/apt/sources.list
  test -z "`cat /etc/apt/sources.list | grep '^deb-src'`" && cat /etc/apt/sources.list | sed -e 's/^deb/deb-src/' >> /etc/apt/sources.list
  apt-get update

  # Install required R, Python, misc. utilities
  apt-get install -y libopenblas-dev libcurl4-openssl-dev libopenmpi-dev openmpi-bin openmpi-common openmpi-doc openssh-client openssh-server libssh-dev wget vim git cmake curl wget python autoconf bzip2 libtool libtool-bin python-pip python-dev locales
  apt-get build-dep -y r-base-core
  # LLVM
  apt-get install -y clang-4.0 llvm-4.0-dev clang++-4.0 clang llvm-dev libc++-dev libc++abi-dev
  apt-get clean
  locale-gen en_US.UTF-8
  pip install --upgrade pip

  # wpllvm
  cd /opt
  git clone "git://www.github.com/travitch/whole-program-llvm"
  pip install whole-program-llvm/   

  # rchk
  cd /opt
  git clone git://www.github.com/kalibera/rchk &&  \
    cd rchk && \
    cd src && \
    make -j `cat /proc/cpuinfo | grep "core id" | wc -l` LLVM=/usr CXX=g++

  # download, build r-devel
  cd /opt
  wget -O - -q https://cran.r-project.org/src/base-prerelease/R-devel.tar.gz | tar zxvf -
  cd /opt/R-devel
  export WLLVM=/usr/local/bin
  export LLVM=/usr
  export RCHK=/opt/rchk
  export CPICFLAGS=-fPIC
  export FPICFLAGS=-fPIC
  export FCPICFLAGS=-fPIC
  export CXXPICFLAGS=-fPIC
  export CXX98PICFLAGS=-fPIC
  export CXX11PICFLAGS=-fPIC
  export CXX14PICFLAGS=-fPIC
  export CXX17PICFLAGS=-fPIC
  /opt/rchk/scripts/build_r.sh

  # fix up cmpconfig.inc to use user-defined PKG_BUILD, R_LIBS
  cat << EOF > /opt/rchk/scripts/cmpconfig.inc
# these options were tested on Ubuntu 16.04.2
#   they allow to build most but not all packages
export CFLAGS="-Wall -g -O0 -fPIC"
export CXXFLAGS="$CFLAGS -I/usr/include/libcxxabi"
export CC=$WLLVM/wllvm
export CXX="$WLLVM/wllvm++ -stdlib=libc++"
export PATH=$LLVM/bin:$PATH
export LLVM_COMPILER=clang
#  export PKG_BUILD_DIR=`pwd`/packages/build
#  export R_LIBS=`pwd`/packages/lib
export LD="clang++ -stdlib=libc++"
EOF

  # print usage message
  cat << EOF

Usage:
   singularity run <rchk_image> <package_name> [package source path]

Local package installation is performed when a package source path is provided.
Otherwise, a default CRAN repository is used.  Output are placed in
${PKG_ROOT}/build and ${PKG_ROOT}/lib directories, which are created if they do
not exist. If not set, the PKG_ROOT shell variable is set to be the current
working directory.

Usage examples:

# Install curl from cran and check:
singularity run rchk.img curl

# Local package install
wget https://cran.r-project.org/src/contrib/irlba_2.3.1.tar.gz
singularity run rchk.img irlba $(pwd)/irlba_2.3.1.tar.gz

# Set the output directory to /tmp
PKG_ROOT=/tmp singularity run rchk.img curl

EOF



%runscript
  if test -z "$1"; then
    echo
    echo "Usage: singularity run <rchk_image> <package_name> [package path]"
    echo
    exit 1
  fi
  REPO="'http://cran.ma.imperial.ac.uk'"
  PKG_NAME="$1"
  PKG_PATH="$1"
  if test -n "$2"; then
    REPO="NULL"
    PKG_PATH="$2"
  fi
  if test -z "$PKG_ROOT"; then
    export PKG_ROOT=`pwd`
    echo
    echo "Note: Setting PKG_ROOT variable to the current directory."
    echo "Output will be in ./lib and ./build subdirectories."
    echo
  fi
  export LLVM=/usr
  export WLLVM=/usr/local/bin
  export RCHK=/opt/rchk
  export CFLAGS="-Wall -g -O0 -fpic"  
  export CXXFLAGS="$CFLAGS -I/usr/include/libcxxabi"
  export CC=$WLLVM/wllvm
  export CXX="$WLLVM/wllvm++ -stdlib=libc++"
  export PATH=$LLVM/bin:$PATH
  export LLVM_COMPILER=clang
  export PKG_BUILD_DIR="${PKG_ROOT}/build"
  export R_LIBS="${PKG_ROOT}/lib"
  export R_LIBS_USER="${PKG_ROOT}/lib"
  export LD="clang++ -stdlib=libc++"  
  mkdir -p "${PKG_BUILD_DIR}"
  mkdir -p "${R_LIBS}"
  cd /opt/R-devel
  echo "install.packages(\"$PKG_PATH\", repos=$REPO)"
  echo "install.packages(\"$PKG_PATH\", repos=$REPO)" |  ./bin/R --slave
  /opt/rchk/scripts/check_package.sh "$PKG_NAME"
  exit
